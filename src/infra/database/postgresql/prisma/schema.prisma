// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        String    @id @default(uuid())
  name      String
  color     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  User      User?     @relation(fields: [userId], references: [id])
  userId    String?
  Expense   Expense[]
}

model User {
  id          String       @id @default(uuid())
  email       String       @unique
  name        String
  password    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  categories  Category[]
  creditCards CreditCard[]
  Expense     Expense[]
}

model CreditCard {
  id               String    @id @default(uuid())
  name             String
  dueDay           Int
  closingDay       Int
  limit            Float
  limitAvailable   Float?
  limitUsed        Float?
  percentLimitUsed Float?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  User             User?     @relation(fields: [userId], references: [id])
  userId           String?
  Bank             Bank?     @relation(fields: [bankId], references: [id])
  bankId           String?
  Expense          Expense[]
}

model Bank {
  id         String       @id @default(uuid())
  name       String
  image      String
  color      String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  CreditCard CreditCard[]
}

model Expense {
  id                     String      @id @default(uuid())
  name                   String
  value                  Float
  date                   DateTime
  isPaid                 Boolean
  isIgnored              Boolean
  isFixed                Boolean
  installmentsIdentifier String
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  category               Category    @relation(fields: [categoryId], references: [id])
  categoryId             String
  creditCard             CreditCard? @relation(fields: [creditCardId], references: [id])
  creditCardId           String?
  User                   User?       @relation(fields: [userId], references: [id])
  userId                 String?
}
