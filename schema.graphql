# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Bank {
  color: String!
  id: ID!
  image: String!
  name: String!
}

type Category {
  color: String!
  id: ID!
  name: String!
  userId: String!
}

input CreateCategoryInput {
  color: String!
  name: String!
}

input CreateCreditCardInput {
  bankId: String!
  closingDay: Float!
  dueDay: Float!
  limit: Float!
  name: String!
}

input CreateExpenseInput {
  categoryId: String!
  creditCardId: String
  installments: Float
  isFixed: Boolean!
  isIgnored: Boolean!
  name: String!
  purchaseDate: DateTimeISO!
  value: Float!
}

input CreateUserInput {
  email: String!
  name: String!
  password: String!
}

type CreditCard {
  bank: Bank!
  bankId: String!
  closingDay: Float!
  dueDay: Float!
  id: ID!
  limit: Float!
  limitAvailable: Float!
  limitUsed: Float!
  name: String!
  percentLimitUsed: Float!
  userId: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

type Expense {
  category: Category!
  categoryId: String!
  creditCard: CreditCard
  creditCardId: String
  id: ID!
  installmentsIdentifier: String!
  invoiceDate: DateTimeISO!
  isFixed: Boolean!
  isIgnored: Boolean!
  isPaid: Boolean!
  name: String!
  purchaseDate: DateTimeISO!
  user: User!
  userId: String!
  value: Float!
}

type ExpenseList {
  expenses: [Expense!]!
}

type ExpenseListByCategory {
  details: [ExpenseListByCategoryDetails!]!
}

type ExpenseListByCategoryDetails {
  amount: Float!
  category: Category!
  expenses: [Expense!]!
}

input ExpenseListByCategoryFilter {
  month: Float!
  year: Float!
}

input ListExpenseByCreditCardAndCategoryFilter {
  creditCardId: String!
  month: Float!
  year: Float!
}

input ListExpenseByCreditCardFilter {
  creditCardId: String!
  month: Float!
  year: Float!
}

input ListExpenseFilter {
  month: Float!
  year: Float!
}

type Mutation {
  authenticate(email: String!, password: String!): String!
  changeExpenseInvoiceDate(id: String!, increaseInvoiceMonth: Float!): Expense!
  createCategory(data: CreateCategoryInput!): Category!
  createCreditCard(data: CreateCreditCardInput!): CreditCard!
  createExpense(data: CreateExpenseInput!): Expense!
  createUser(data: CreateUserInput!): User!
  deleteCategory(id: String!): Boolean!
  deleteCreditCard(id: String!): Boolean!
  deleteExpense(all: Boolean, id: String!): Boolean!
  ignoreExpense(all: Boolean, id: String!, isIgnored: Boolean!): Expense!
  paidExpense(id: String!, isPaid: Boolean!): Expense!
  updateCategory(data: UpdateCategoryInput!, id: String!): Category!
  updateExpense(all: Boolean, data: UpdateExpenseInput!, id: String!): Expense!
}

type Query {
  findBankById(id: String!): Bank!
  findCategoryById(id: String!): Category!
  findCreditCardById(id: String!): CreditCard!
  findExpenseById(id: String!): Expense!
  findUserById(id: String!): User!
  listBanks: [Bank!]!
  listCategories: [Category!]!
  listCreditCards: [CreditCard!]!
  listExpense(filter: ListExpenseFilter!): ExpenseList!
  listExpenseByCategory(filter: ExpenseListByCategoryFilter!): ExpenseListByCategory!
  listExpenseByCategoryAndCreditCard(filter: ListExpenseByCreditCardAndCategoryFilter!): ExpenseListByCategory!
  listExpenseByCreditCard(filter: ListExpenseByCreditCardFilter!): ExpenseList!
  listExpenseByWallet(filter: ListExpenseFilter!): ExpenseList!
  listExpenseByWalletAndCategory(filter: ExpenseListByCategoryFilter!): ExpenseListByCategory!
}

input UpdateCategoryInput {
  color: String!
  name: String!
}

input UpdateExpenseInput {
  categoryId: String
  creditCardId: String
  value: Float
}

type User {
  email: String!
  id: ID!
  name: String!
}